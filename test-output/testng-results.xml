<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="8" passed="6" failed="2" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-06-07T00:47:44 IST" name="Suite" finished-at="2024-06-07T00:48:00 IST" duration-ms="15979">
    <groups>
    </groups>
    <test started-at="2024-06-07T00:47:44 IST" name="Test" finished-at="2024-06-07T00:48:00 IST" duration-ms="15979">
      <class name="CRUD_Operations.TestPUT">
        <test-method is-config="true" signature="setupTest()[pri:0, instance:CRUD_Operations.TestPUT@2462cb01]" started-at="2024-06-07T00:47:56 IST" name="setupTest" finished-at="2024-06-07T00:47:56 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:CRUD_Operations.TestPUT@2462cb01]" started-at="2024-06-07T00:47:56 IST" name="startTest" finished-at="2024-06-07T00:47:56 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CRUD_Operations.TestPUT.pingRequest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method signature="pingRequest()[pri:201, instance:CRUD_Operations.TestPUT@2462cb01]" started-at="2024-06-07T00:47:56 IST" name="pingRequest" finished-at="2024-06-07T00:47:58 IST" duration-ms="1225" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- pingRequest -->
        <test-method is-config="true" signature="setUPRequest()[pri:0, instance:CRUD_Operations.TestPUT@2462cb01]" started-at="2024-06-07T00:47:56 IST" name="setUPRequest" finished-at="2024-06-07T00:47:56 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUPRequest -->
        <test-method is-config="true" signature="reportFlush(org.testng.ITestResult)[pri:0, instance:CRUD_Operations.TestPUT@2462cb01]" started-at="2024-06-07T00:47:58 IST" name="reportFlush" finished-at="2024-06-07T00:47:58 IST" duration-ms="32" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=pingRequest status=SUCCESS method=TestPUT.pingRequest()[pri:201, instance:CRUD_Operations.TestPUT@2462cb01] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportFlush -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:CRUD_Operations.TestPUT@2462cb01]" started-at="2024-06-07T00:47:58 IST" name="startTest" finished-at="2024-06-07T00:47:58 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CRUD_Operations.TestPUT.putReq()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method signature="putReq()[pri:501, instance:CRUD_Operations.TestPUT@2462cb01]" started-at="2024-06-07T00:47:58 IST" name="putReq" finished-at="2024-06-07T00:48:00 IST" duration-ms="2636" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [405]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [405]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:1419)
at org.testng.Assert.assertEquals(Assert.java:1383)
at org.testng.Assert.assertEquals(Assert.java:1429)
at CRUD_Operations.TestPUT.putReq(TestPUT.java:52)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- putReq -->
        <test-method is-config="true" signature="setUPRequest()[pri:0, instance:CRUD_Operations.TestPUT@2462cb01]" started-at="2024-06-07T00:47:58 IST" name="setUPRequest" finished-at="2024-06-07T00:47:58 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUPRequest -->
        <test-method is-config="true" signature="reportFlush(org.testng.ITestResult)[pri:0, instance:CRUD_Operations.TestPUT@2462cb01]" started-at="2024-06-07T00:48:00 IST" name="reportFlush" finished-at="2024-06-07T00:48:00 IST" duration-ms="44" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=putReq status=FAILURE method=TestPUT.putReq()[pri:501, instance:CRUD_Operations.TestPUT@2462cb01] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportFlush -->
      </class> <!-- CRUD_Operations.TestPUT -->
      <class name="CRUD_Operations.TestPOST">
        <test-method is-config="true" signature="setupTest()[pri:0, instance:CRUD_Operations.TestPOST@1b410b60]" started-at="2024-06-07T00:47:54 IST" name="setupTest" finished-at="2024-06-07T00:47:54 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:CRUD_Operations.TestPOST@1b410b60]" started-at="2024-06-07T00:47:54 IST" name="startTest" finished-at="2024-06-07T00:47:54 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CRUD_Operations.TestPOST.pingRequest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method signature="pingRequest()[pri:201, instance:CRUD_Operations.TestPOST@1b410b60]" started-at="2024-06-07T00:47:54 IST" name="pingRequest" finished-at="2024-06-07T00:47:55 IST" duration-ms="1234" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- pingRequest -->
        <test-method is-config="true" signature="setUPRequest()[pri:0, instance:CRUD_Operations.TestPOST@1b410b60]" started-at="2024-06-07T00:47:54 IST" name="setUPRequest" finished-at="2024-06-07T00:47:54 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUPRequest -->
        <test-method is-config="true" signature="reportFlush(org.testng.ITestResult)[pri:0, instance:CRUD_Operations.TestPOST@1b410b60]" started-at="2024-06-07T00:47:55 IST" name="reportFlush" finished-at="2024-06-07T00:47:55 IST" duration-ms="39" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=pingRequest status=SUCCESS method=TestPOST.pingRequest()[pri:201, instance:CRUD_Operations.TestPOST@1b410b60] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportFlush -->
        <test-method is-config="true" signature="setUPRequest()[pri:0, instance:CRUD_Operations.TestPOST@1b410b60]" started-at="2024-06-07T00:47:55 IST" name="setUPRequest" finished-at="2024-06-07T00:47:55 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUPRequest -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:CRUD_Operations.TestPOST@1b410b60]" started-at="2024-06-07T00:47:55 IST" name="startTest" finished-at="2024-06-07T00:47:55 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CRUD_Operations.TestPOST.postReq() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method signature="postReq()[pri:501, instance:CRUD_Operations.TestPOST@1b410b60]" started-at="2024-06-07T00:47:55 IST" name="postReq" finished-at="2024-06-07T00:47:56 IST" duration-ms="1414" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- postReq -->
        <test-method is-config="true" signature="reportFlush(org.testng.ITestResult)[pri:0, instance:CRUD_Operations.TestPOST@1b410b60]" started-at="2024-06-07T00:47:56 IST" name="reportFlush" finished-at="2024-06-07T00:47:56 IST" duration-ms="27" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=postReq status=SUCCESS method=TestPOST.postReq()[pri:501, instance:CRUD_Operations.TestPOST@1b410b60] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportFlush -->
      </class> <!-- CRUD_Operations.TestPOST -->
      <class name="CRUD_Operations.TestDELETE">
        <test-method is-config="true" signature="setupTest()[pri:0, instance:CRUD_Operations.TestDELETE@7b50df34]" started-at="2024-06-07T00:47:49 IST" name="setupTest" finished-at="2024-06-07T00:47:49 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="setUPRequest()[pri:0, instance:CRUD_Operations.TestDELETE@7b50df34]" started-at="2024-06-07T00:47:49 IST" name="setUPRequest" finished-at="2024-06-07T00:47:49 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUPRequest -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:CRUD_Operations.TestDELETE@7b50df34]" started-at="2024-06-07T00:47:49 IST" name="startTest" finished-at="2024-06-07T00:47:49 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CRUD_Operations.TestDELETE.pingRequest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method signature="pingRequest()[pri:110, instance:CRUD_Operations.TestDELETE@7b50df34]" started-at="2024-06-07T00:47:49 IST" name="pingRequest" finished-at="2024-06-07T00:47:50 IST" duration-ms="1270" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- pingRequest -->
        <test-method is-config="true" signature="reportFlush(org.testng.ITestResult)[pri:0, instance:CRUD_Operations.TestDELETE@7b50df34]" started-at="2024-06-07T00:47:50 IST" name="reportFlush" finished-at="2024-06-07T00:47:50 IST" duration-ms="51" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=pingRequest status=SUCCESS method=TestDELETE.pingRequest()[pri:110, instance:CRUD_Operations.TestDELETE@7b50df34] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportFlush -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:CRUD_Operations.TestDELETE@7b50df34]" started-at="2024-06-07T00:47:50 IST" name="startTest" finished-at="2024-06-07T00:47:50 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CRUD_Operations.TestDELETE.deleteReq()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUPRequest()[pri:0, instance:CRUD_Operations.TestDELETE@7b50df34]" started-at="2024-06-07T00:47:50 IST" name="setUPRequest" finished-at="2024-06-07T00:47:50 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUPRequest -->
        <test-method signature="deleteReq()[pri:510, instance:CRUD_Operations.TestDELETE@7b50df34]" started-at="2024-06-07T00:47:50 IST" name="deleteReq" finished-at="2024-06-07T00:47:54 IST" duration-ms="3203" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteReq -->
        <test-method is-config="true" signature="reportFlush(org.testng.ITestResult)[pri:0, instance:CRUD_Operations.TestDELETE@7b50df34]" started-at="2024-06-07T00:47:54 IST" name="reportFlush" finished-at="2024-06-07T00:47:54 IST" duration-ms="30" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=deleteReq status=SUCCESS method=TestDELETE.deleteReq()[pri:510, instance:CRUD_Operations.TestDELETE@7b50df34] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportFlush -->
      </class> <!-- CRUD_Operations.TestDELETE -->
      <class name="CRUD_Operations.TestGET">
        <test-method is-config="true" signature="init()[pri:0, instance:CRUD_Operations.TestGET@4c2bb6e0]" started-at="2024-06-07T00:47:44 IST" name="init" finished-at="2024-06-07T00:47:44 IST" duration-ms="135" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method is-config="true" signature="setupTest()[pri:0, instance:CRUD_Operations.TestGET@4c2bb6e0]" started-at="2024-06-07T00:47:44 IST" name="setupTest" finished-at="2024-06-07T00:47:44 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupTest -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:CRUD_Operations.TestGET@4c2bb6e0]" started-at="2024-06-07T00:47:44 IST" name="startTest" finished-at="2024-06-07T00:47:45 IST" duration-ms="555" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CRUD_Operations.TestGET.pingRequest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setUPRequest()[pri:0, instance:CRUD_Operations.TestGET@4c2bb6e0]" started-at="2024-06-07T00:47:45 IST" name="setUPRequest" finished-at="2024-06-07T00:47:45 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUPRequest -->
        <test-method signature="pingRequest()[pri:201, instance:CRUD_Operations.TestGET@4c2bb6e0]" started-at="2024-06-07T00:47:45 IST" name="pingRequest" finished-at="2024-06-07T00:47:47 IST" duration-ms="2537" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- pingRequest -->
        <test-method is-config="true" signature="reportFlush(org.testng.ITestResult)[pri:0, instance:CRUD_Operations.TestGET@4c2bb6e0]" started-at="2024-06-07T00:47:47 IST" name="reportFlush" finished-at="2024-06-07T00:47:48 IST" duration-ms="203" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=pingRequest status=SUCCESS method=TestGET.pingRequest()[pri:201, instance:CRUD_Operations.TestGET@4c2bb6e0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportFlush -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:CRUD_Operations.TestGET@4c2bb6e0]" started-at="2024-06-07T00:47:48 IST" name="startTest" finished-at="2024-06-07T00:47:48 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void CRUD_Operations.TestGET.getReq() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method signature="getReq()[pri:501, instance:CRUD_Operations.TestGET@4c2bb6e0]" started-at="2024-06-07T00:47:48 IST" name="getReq" finished-at="2024-06-07T00:47:49 IST" duration-ms="1341" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:1419)
at org.testng.Assert.assertEquals(Assert.java:1383)
at org.testng.Assert.assertEquals(Assert.java:1429)
at CRUD_Operations.TestGET.getReq(TestGET.java:53)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getReq -->
        <test-method is-config="true" signature="setUPRequest()[pri:0, instance:CRUD_Operations.TestGET@4c2bb6e0]" started-at="2024-06-07T00:47:48 IST" name="setUPRequest" finished-at="2024-06-07T00:47:48 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUPRequest -->
        <test-method is-config="true" signature="reportFlush(org.testng.ITestResult)[pri:0, instance:CRUD_Operations.TestGET@4c2bb6e0]" started-at="2024-06-07T00:47:49 IST" name="reportFlush" finished-at="2024-06-07T00:47:49 IST" duration-ms="39" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getReq status=FAILURE method=TestGET.getReq()[pri:501, instance:CRUD_Operations.TestGET@4c2bb6e0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reportFlush -->
      </class> <!-- CRUD_Operations.TestGET -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
